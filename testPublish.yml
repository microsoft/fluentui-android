apply plugin: 'maven-publish'

ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
ext["testGroupId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["ossrhUsername"] = project.hasProperty('OSSRHUsername') ? "$OSSRHUsername" : ''
    ext["ossrhPassword"] = project.hasProperty('OSSRHPassword') ? "$OSSRHPassword" : ''
    ext["sonatypeStagingProfileId"] = project.hasProperty('SonatypeStagingProfileID') ? "$SonatypeStagingProfileID" : ''
    ext["testGroupId"] = project.hasProperty('testGroupId') ? "$testGroupId" : ''
}

project.ext.publishingFunc = { artifactIdName ->
    publishing {
        repositories {
            maven {
                name = "sonatype"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
        publications {
            FluentUI(MavenPublication) {
                groupId testGroupId
                artifactId artifactIdName
                version = android.defaultConfig.versionName
                artifact(sourceJar)
                artifact(bundleReleaseAar)
                pom {
                    name = artifactIdName
                    description = 'Fluent UI Android, Module : '.concat(artifactIdName)
                    url = project.ext.github_url
                    licenses {
                        license {
                            name = project.ext.license_type
                            url = project.ext.license_url
                        }
                    }
                    developers {
                        developer {
                            id = project.ext.developer_id
                            name = project.ext.developer_name
                            email = project.ext.developer_email
                        }
                    }
                    scm {
                        connection = project.ext.scm_connection
                        developerConnection = project.ext.scm_dev_connection
                        url = project.ext.scm_url
                    }
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.implementation.allDependencies.each {
                            if (it.group != null && (it.name != null && it.name != "unspecified") && it.version != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                if (it instanceof ProjectDependency) {
                                    dependencyNode.appendNode('groupId', testGroupId)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    def artifactName = it.name.replaceAll('-', '_') + '_versionid'
                                    dependencyNode.appendNode('version', getProperty(artifactName).toString())
                                } else {
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                }

                            }
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = testGroupId
    stagingProfileId = sonatypeStagingProfileId
    username = ossrhUsername
    password = ossrhPassword
}