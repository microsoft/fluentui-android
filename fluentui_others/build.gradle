/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply from: '../config.gradle'
android {
    compileSdkVersion constants.compileSdkVersion
    defaultConfig {
        minSdkVersion constants.minSdkVersion
        targetSdkVersion constants.targetSdkVersion
        versionCode project.ext.fluentui_others_version_code
        versionName project.ext.fluentui_others_versionid
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
    }
    buildFeatures {
        viewBinding true
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    productFlavors {
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    taskGraph.allTasks.forEach {
        if (it.name.contains("ReleaseUnitTest")) {
            it.enabled = false
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':fluentui_core')
    implementation project(':fluentui_listitem')
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.exifinterface:exifinterface:$exifInterfaceVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.jakewharton.threetenabp:threetenabp:$threetenabpVersion"
    implementation "com.splitwise:tokenautocomplete:$tokenautocompleteVersion"
    implementation "com.microsoft.device:dualscreen-layout:$duoVersion"
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$extJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

project.afterEvaluate {
    publishing {
        repositories {
            maven {
                url 'https://pkgs.dev.azure.com/microsoftdesign/fluentui-native/_packaging/fluentui-android/maven/v1'
                credentials {
                    username = project.hasProperty("mavenUserName") ? "$mavenUserName" : ""
                    password = project.hasProperty("mavenPassword") ? "$mavenPassword" : ""
                }
            }
        }
        publications {
            FluentUI(MavenPublication) {
                groupId 'com.microsoft.fluentui'
                artifactId "fluentui_others"
                version = android.defaultConfig.versionName
                artifact(sourceJar)
                artifact(bundleReleaseAar)
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && (it.name != null && it.name != "unspecified") && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            if (it instanceof ProjectDependency) {
                                dependencyNode.appendNode('groupId', 'com.microsoft.fluentui')
                                dependencyNode.appendNode('artifactId', it.name)
                                def artifactName = it.name.replaceAll('-', '_') + '_versionid'
                                dependencyNode.appendNode('version', getProperty(artifactName).toString())
                            } else {
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }

                        }
                    }
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? "$bintrayUser" : ""
    key = project.hasProperty('bintrayKey') ? "$bintrayKey" : ""
    publications = ['FluentUI']
    publish = true
    override = true
    pkg {
        repo = 'generic'
        name = 'fluentui_others'
        version {
            name = android.defaultConfig.versionName
            vcsTag = android.defaultConfig.versionName
        }
    }
}


