variables:
  - group: InfoSec-SecurityResults
  - name: tags
    value: production,externalfacing

jobs:
  - template: fluentui-android-compliance.yml

  - job: Build
    pool:
      vmImage: 'macos-latest'
    variables:
      - name: BUILDSECMON_OPT_IN
        value: true
    steps:
    - task: Bash@3
      displayName: 'Base64 decodes and pipes the GPG key content into the secret file'
      env:
        GPG_KEY_CONTENT: $(gpgContent)
        SIGNING_SECRET_KEY_RING_FILE: $(gpgSecretFilePath)
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          sudo bash -c "echo '$GPG_KEY_CONTENT' | base64 -d > '$SIGNING_SECRET_KEY_RING_FILE'"
          ls
    - task: Gradle@2
      displayName: 'gradlew build publish'
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build publish'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(jdkVersion)'
        options: '-PappCenterSecret=$(appCenterSecret) -PsigningKeyPassword=$(signingKeyPassword) -PsigningKeyStorePassword=$(signingKeyStorePassword) -POSSRHUsername=$(ossrhUsername) -POSSRHPassword=$(ossrhPassword) -PmavenUserName=$(mavenUsername) -PmavenPassword=$(mavenPassword) -PGPGSigningKeyID=$(gpgSignKey) -PGPGSigningPassword=$(gpgSignPassword) -PSigningSecretKeyRingFile=$(gpgSecretFileParentPath) -PSonatypeStagingProfileID=$(sonatypeStagingProfileId)'

    - task: Gradle@2
      displayName: Unit tests
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'testDevelopmentDebugUnitTest'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(jdkVersion)'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false

    - task: Gradle@2
      displayName: Generate testApk
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'assembleDevelopmentDebugAndroidTest'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(jdkVersion)'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false

    - task: Gradle@2
      displayName: Hydra Lab UI test
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'requestHydraLabTest -PappApkPath=$(build.sourcesdirectory)/FluentUI.Demo/build/outputs/apk/development/debug/FluentUI.Demo-development-debug.apk -PtestApkPath=$(build.sourcesdirectory)/FluentUI.Demo/build/outputs/apk/androidTest/development/debug/FluentUI.Demo-development-debug-androidTest.apk -PbuildFlavor=$(buildFlavor) -PtestSuiteName=$(testSuiteName) -PtimeOutSeconds=$(timeOutSeconds) -PdeviceIdentifier=$(deviceIdentifier) -PgroupTestType=$(groupTestType) -PreportAudience=TestLabOwner -PauthToken=$(authToken) -PpkgName=$(pkgName) -PtestPkgName=$(testPkgName) -PrunningType=$(runningType) -PframeworkType=$(frameworkType)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(jdkVersion)'
        publishJUnitResults: false
      
    - task: AndroidSigning@2
      displayName: 'Signing and aligning APK file(s) **/*.apk'
      inputs:
        jarsign: false
        zipalign: false
    
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: |
         **/*.apk
         **/*.aar
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: ðŸ“’ Generate Manifest
      inputs:
        BuildDropPath: '$(build.artifactstagingdirectory)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Build'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: Build
        